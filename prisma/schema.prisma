// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod" // (default) the directory where generated zod schemas will be saved
  relationModel         = true // (default) Create and export both plain and related models.
  modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelSuffix           = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUM
enum CategoryName {
  compact
  dslr
  film
  mirrorless
  professional
}

model Product {
  id            String   @id @default(uuid()) ///@zod.nullish()
  title         String ///@zod.min(3, { message: "Must be 3 or more characters long" }).max(50, { message: "Must be 50 or fewer characters long" })
  description   String ///@zod.min(20, { message: "Must be 20 or more characters long" }).max(150, { message: "Must be 150 or fewer characters long" })
  model         String ///@zod.min(3, { message: "Must be 3 or more characters long" }).max(50, { message: "Must be 50 or fewer characters long" })
  imageUrl      String[] @unique
  price         Int      @default(0)
  discount      Int?     @default(0) ///@zod.max(99,{message:"Must be at most 99"})
  isNew         Boolean  @default(false)
  createdAt     DateTime @default(now()) ///@zod.nullish()
  updatedAt     DateTime @updatedAt ///@zod.nullish()
  manufactureId String
  categoryId    String
  sellerId      String

  // RELATIONS
  manufacture Manufacture @relation(fields: [manufactureId], references: [id])
  category    Category    @relation(fields: [categoryId], references: [id])
  seller      Seller      @relation(fields: [sellerId], references: [id])
}

model Category {
  id      String       @id @default(uuid())
  title   CategoryName
  Product Product[]
}

model Manufacture {
  id      String    @id @default(uuid())
  name    String ///@zod.min(3, { message: "Must be 3 or more characters long" }).max(50, { message: "Must be 50 or fewer characters long" })
  address String?
  phone   Int       @unique
  website String? /// @zod.url({ message: "Invalid url" })
  Product Product[]
}

model Seller {
  id      String    @id @default(uuid())
  name    String ///@zod.min(3, { message: "Must be 3 or more characters long" }).max(50, { message: "Must be 50 or fewer characters long" })
  email   String?   @unique ///@zod.email()
  mobile  Int       @unique
  address String?
  Product Product[]
}

model User {
  id             String  @id @unique
  firstName      String
  lastName       String
  emailAddresses String ///@zod.email()
  phoneNumbers   String?
  imageUrl       String?
  hasImage       Boolean
}
