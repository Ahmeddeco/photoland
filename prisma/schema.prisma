// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CategoryName {
  compact
  dslr
  film
  mirrorless
  professional
}

model Product {
  id            String      @id @default(uuid()) /// @zod.uuid()
  title         String
  description   String
  manufacture   Manufacture @relation(fields: [manufactureId], references: [id])
  manufactureId String
  model         String
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  seller        Seller      @relation(fields: [sellerId], references: [id])
  sellerId      String
  imageUrl      String[]    @unique
  price         Int         @default(0)
  discount      Int?        @default(0)
  isNew         Boolean
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Category {
  id      String       @id @default(uuid()) /// @zod.uuid()
  title   CategoryName
  Product Product[]
}

model Manufacture {
  id      String    @id @default(uuid()) /// @zod.uuid()
  name    String ///@zod.min(3,{message:'must be at least 3'}).max(50,{message:'must be at most 50'}))
  address String?
  phone   Int       @unique
  Product Product[]
}

model Seller {
  id      String    @id @unique
  name    String
  email   String?   @unique
  mobile  Int       @unique
  address String?
  Product Product[]
}

model User {
  id             String  @id @unique
  firstName      String
  lastName       String
  emailAddresses String
  phoneNumbers   String?
  imageUrl       String?
  hasImage       Boolean
}
